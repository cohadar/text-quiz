#!/usr/bin/python

import random
import argparse


START_WEIGHT = 1
MIN_WEIGHT = 0
MAX_WEIGHT = 8


def load_tsv(db, reverse, bidi, fileName):
    linenum = 0
    with open(fileName, 'r') as f:
        while True:
            linenum += 1
            line = f.readline().rstrip()
            if not line:
                break
            parts = line.split("\t")
            if len(parts) != 2:
                print "BAD LINE: %s[%d]: %s " % (fileName, linenum, line)
            if bidi:
                db.append((parts[0], parts[1]))
                db.append((parts[1], parts[0]))
            elif reverse:
                db.append((parts[1], parts[0]))
            else:
                db.append((parts[0], parts[1]))
    return db


def ask(q, a):
    print q
    ans = raw_input()
    if ans == a:
        return True
    else:
        return False


def weighted_choice_king(weights):
    total = 0
    winner = 0
    for i, w in enumerate(weights):
        total += w
        if random.random() * total < w:
            winner = i
    return winner


def all_zeros(arr):
    for w in arr:
        if w > 0:
            return False
    return True


def non_zeros(arr):
    count = 0
    for w in arr:
        if w > 0:
            count += 1
    return count


def to_chars(arr):
    ret = ""
    for w in arr:
        if w > 0:
            ret += '.'
        else:
            ret = '_' + ret
    return ret


def print_worst(weights, miss, db):
    if all_zeros(miss):
        if all_zeros(weights):
            print 'Flawless victory! Bye!'
        else:
            print 'Incomplete! Bye.'
        return
    if not all_zeros(weights):
        print '\nIncomplete!'
    bad = [(m, i) for i, m in enumerate(miss) if m > 0]
    bad.sort()
    print '\n\nHere are your worst results:'
    for m, i in reversed(bad):
        print '%d: %s - %s' % (m, db[i][0], db[i][1])
    print 'Bye!'
    return


def main(reverse, bidi, cards):
    db = []
    for fileName in cards:
        load_tsv(db, reverse, bidi, fileName)
    weights = [START_WEIGHT] * len(db)
    miss = [0] * len(db)
    while not all_zeros(weights):
        try:
            index = weighted_choice_king(weights)
            if ask(*db[index]):
                weights[index] = max(weights[index] / 2, MIN_WEIGHT)
                print to_chars(weights)
            else:
                weights[index] = min(weights[index] * 2, MAX_WEIGHT)
                miss[index] += 1
                print db[index][1]
            print ''
        except KeyboardInterrupt:
            break
    print_worst(weights, miss, db)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Learning Flashcards quiz.')
    parser.add_argument('-r', '--reverse', action='store_true', help='reverse side quiz')
    parser.add_argument('-b', '--bidi', action='store_true', help='both direct and reverse quiz')
    parser.add_argument('cards', metavar='CARD.tsv', type=str, nargs='+', help='flashcard tsv files')
    args = parser.parse_args()
    print '\t\tCtrl-C to exit.'
    main(args.reverse, args.bidi, args.cards)
